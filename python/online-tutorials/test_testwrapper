#!/usr/bin/env python
#
# Copyright (c) 2019 SUSE Linux AG, Nuernberg, Germany.
# All rights reserved.
#
# Authors:  Gernot Payer <gpayer@suse.de>
#			Craig Salmond <csalmond@suse.com> 2006-2019
#
# A wrapper script to run a given test as a child process and
# to control this process.
#
# return codes:
#	0: success
#	1: failure
#	2: pass with warning
#	3: not applicable
#	4: not supported. Used to be: failure (for tests that run to termination no matter what) - returns a 1 to test console
#	5: not testable. Used to be: not supported (returns 4 to TestConsole)
#

import os,glob
import sys,time
import signal
import re
import string
import commands


# Determine where script is running from and set DefaultLogDir accordingly
ScriptPath = os.path.dirname(os.path.realpath(__file__))

if ScriptPath.find('soc') != -1:
	DefaultLogDir = "/var/opt/suse/testKits/soc"
elif ScriptPath.find('ses') != -1:
	DefaultLogDir = "/var/opt/suse/testKits/ses"
else:
	DefaultLogDir = "/var/opt/suse/testKits/system"

curtime = time.localtime()

# Current running test case
WaitForPID = -1

# End of looping: set by alarm handler
alarmTimeOut = False

LOOP_TIMEOUT = 0
LOOP_TIMES = 1

class Config:
	def __init__(self):
		self.TimeToRun = 86400
		self.ProjDir = ""
		self.LogDir = DefaultLogDir
		self.LogFile = DefaultLogDir + '/' + "testwrapper-%d%02d%02d.%02d%02d%02d" % curtime[0:6]
		self.PrefixLogFile = ""
		self.LoopMode = False
		self.LoopModeType = 1	# 0: with timeout  1: specific number of loops
		self.NumberOfLoops = 1
		self.loopcount = 0
		self.ExclusiveParam = 0
		self.Exec = "/bin/false"
		self.Command = ""
		self.ReniceVal = 0
		self.osVer = 0
		
	def setTimeToRun(self,ts):
		l = len(ts)
		num = int(ts[:l-1]) # string indexes
		suffix = ts[l-1:]
		if not suffix in ['s','m','h','d']:
			logstr(self, "Error: Only s,m,h,d allowed as time suffixes")
			sys.exit(1)
		if suffix == 's':
			self.TimeToRun = num
		elif suffix == 'm':
			self.TimeToRun = num * 60
		elif suffix == 'h':
			self.TimeToRun = num * 3600
		elif suffix == 'd':
			self.TimeToRun = num * 86400


Usage = """Usage: %s [-hldprn|t] <command>
   -h              Help.
   -l              Loop test (default mode is -n).
   -d <logdir>     Log directory path (default: %s).
   -p <prefix>     Prefix added to beginning of log file name.
   -r <nice_val>   Renice value 19 (lowest priority) to -20 (highest).
   -n <times>      Number of loops if loop mode is set (excludes -t option).
   -t <time>       Time to run if loop mode is set (default: %d seconds).
                   e.g.: 1d, 3h, 5m or 42s (excludes -n option).
""" % (sys.argv[0],DefaultLogDir,86400)

# Checks parameter and returns Config object
def checkParams():
	conf = Config()
	if len(sys.argv) == 1:
		logstr(conf, Usage)
		sys.exit(1)
	import getopt
	try:
		allopts = getopt.getopt(sys.argv[1:],'hld:p:r:n:t:')
	except getopt.GetoptError,e:
		logstr(conf, "\n***\n")
		logstr(conf, "Warning: %s" % e)
		logstr(conf, "\n***\n")
		logstr(conf, Usage)
		sys.exit(1)
	opts = allopts[0]
	for o in opts:
		ok,ov = o
		if ok == '-h':
			logstr(conf, Usage)
			sys.exit(1)
		elif ok == '-t':
			if conf.ExclusiveParam:
				logstr(conf, "\n***\n")
				logstr(conf, "Error: -n and -t cannot be used at the same time")
				logstr(conf, "\n***\n")
				sys.exit(1)
			conf.setTimeToRun(ov)
			conf.LoopModeType = 0
			conf.ExclusiveParam = True
		elif ok == '-l':
			conf.LoopMode = True
		elif ok == '-d':
			conf.ProjDir = ov
			conf.LogDir = DefaultLogDir + '/' + ov + "/testwrapper"
		elif ok == '-n':
			if conf.ExclusiveParam:
				logstr(conf, "\n***\n")
				logstr(conf, "Error: -n and -t cannot be used at the same time")
				logstr(conf, "\n***\n")
				sys.exit(1)
			conf.NumberOfLoops = int(ov)
			conf.LoopModeType = 1
			conf.ExclusiveParam = True
		elif ok == '-p':
			conf.PrefixLogFile = ov
		elif ok == '-r':
			conf.ReniceVal = int(ov)
	conf.Command = string.join(allopts[1][0:])
	if conf.ProjDir != "":
		conf.Command = conf.Command + " -d " + conf.ProjDir
	if conf.PrefixLogFile != "":
		conf.Command = conf.Command + " -p " + conf.PrefixLogFile
	# logstr(conf,"conf.Command = "+conf.Command)
	# Create LogDir if necessary and set conf.LogFile
	try:
		os.stat(conf.LogDir)
	except OSError:
		os.system("mkdir -p "+ conf.LogDir)
	conf.LogFile = conf.LogDir + '/' + conf.PrefixLogFile + "testwrapper-%d%02d%02d.%02d%02d%02d" % curtime[0:6]
	getOsVer( conf )
	return conf

def checkUID():
	if os.getuid() != 0:
		logstr(conf, "\n***\n")
		logstr(conf, 'Error: must run as root!')
		logstr(conf, "\n***\n")
		sys.exit(1)

def checkTestApply(conf):
	import subprocess
	# Get Arch
	out = subprocess.Popen(['uname', '-i'],stdout=subprocess.PIPE, 
	stderr=subprocess.STDOUT)	
	stdout,stderr = out.communicate()
	logstr(conf,'\n'+'='*40+"\n\ncheckTestApply:arch "+stdout+'\n')
	arch = re.search("aarch64", stdout)
	if arch:
		# Get test name and check if video or BIOS, or USB is there. 
		command = conf.Command.split()
		test_name = re.search(r"video|BIOS", conf.Command)		
		if test_name:
			logstr(conf,'\n'+'='*40+"\n\ncheckTestApply:Found test:video|BIOS\n")
			# NOT APPLICABLE
			sys.exit(3)

def prepareEnv(conf):
	# prepare logging stuff
	import socket
	# TODO: what to write initally into log file?
	logstr(conf,'\n'+'='*40+"\n\nRunning test: "+conf.Command+'\n')
	command = conf.Command.split()
	if re.search("xterm", conf.Command) == None:
#	if re.search("gnome-terminal", conf.Command) == None:
		cmdline = "/usr/bin/md5sum "+command[0]+" >> "+conf.LogDir+"/testwrapper.txt"
	else:		# don't checksum xterm, but checksum what it runs.
#		cmdline = "/usr/bin/md5sum "+command[2]+" >> "+conf.LogDir+"/testwrapper.txt"
		# ../xterm -fa Courier -fs 14 -e /home/InstSource/sck/sck_copy_install files.sh
		cmdline = "/usr/bin/md5sum "+command[6]+" >> "+conf.LogDir+"/testwrapper.txt"
	if re.search( "15", conf.osVer ) != None:
		try:
			# This is needed on SLE 12 for popup windows to work
			envVars = file('/opt/suse/testKits/system/configs/xsession', 'r' )
			for env in envVars.readlines():
				if env == "\n":
					continue
				line = env.split()
				if re.search("=", env ) != None:
					keys = line[2].split('=')
					key = keys[0]
					logstr(conf, "key = "+key+"\n")
				else:
					key = line[2]
					logstr(conf, "key = "+key+"\n")
				if re.search("\"", env) != None:
					value = env.split('"')
					logstr(conf, "Setting os.environ["+key+"] = "+value[1]+"\n")
					os.environ[key] = value[1]
					if key == "HOSTNAME":
						hostName = value[1]
						logstr(conf, "hostName = "+hostName+"\n")
					if key == "XAUTHLOCALHOSTNAME":
						hostName = value[1]
						logstr(conf, "hostName = "+hostName+"\n")
			logstr(conf, "Setting os.environ['DISPLAY'] = \":0\"\n")
			os.environ['DISPLAY'] = ":0"
			# set environmental varibles that need to be updated
			for line in os.listdir( '/run/user/0/' ):
				logstr(conf, line+" = os.listdir( '/run/user/0/' )\n" )
				if re.search( "keyring", line ) != None:
					logstr(conf, "newGnomeKeyringCtrl="+line+'\n')
					logstr(conf, "Setting os.environ['SSH_AUTH_SOCK'] = \"/run/user/0/"+line+"/ssh\"\n")
					os.environ['SSH_AUTH_SOCK'] = "/run/user/0/"+line+"/ssh"
				if re.search( "gdm", line ) != None:
					logstr(conf, "Setting os.environ['XAUTHORITY'] =  \"/run/user/0/gdm/Xauthority\"\n")
					os.environ['XAUTHORITY'] = "/run/user/0/gdm/Xauthority"
				if re.search( "mutter", line ) != None:
					logstr(conf, "Setting os.environ['XAUTHORITY'] =  \"/run/user/0/mutter/Xauthority\"\n")
					os.environ['XAUTHORITY'] = "/run/user/0/mutter/Xauthority"
				if re.search( "gnome-shell", line ) != None:
					# may be able to derive $DISPLAY from the gnome-shell directory.
					for line in os.listdir( '/run/user/0/gnome-shell' ):
						logstr(conf, "/run/user/0/gnome-shell/"+line+"\n" )
						if re.search( ":1", line ) != None:
							logstr(conf, "Setting os.environ['DISPLAY'] = \":1\"\n")
							os.environ['DISPLAY'] = ":1"
			for line in os.listdir( '/run/gdm/' ):
				if re.search( "auth-for-root", line ) != None:
					logstr(conf, "Setting os.environ['XAUTHORITY'] =  \"/run/gdm/"+line+"/database\"\n")
					os.environ['XAUTHORITY'] = "/run/gdm/"+line+"/database"
			for line in os.listdir( '/tmp/.ICE-unix/' ):
				logstr(conf, line+" = os.listdir( '/tmp/.ICE-unix/' )\n" )
				iceUnixNum = line
				logstr(conf, "iceUnixNum="+iceUnixNum+'\n')
				temp = "/tmp/.ICE-unix/"+iceUnixNum
				logstr(conf, "temp="+temp+'\n')
				if os.stat( temp ).st_gid == 0:
					logstr(conf, "Setting os.environ['SESSION_MANAGER'] =  \"local/"+hostName+":@/tmp/.ICE-unix/"+iceUnixNum+",unix/"+hostName+":/tmp/.ICE-unix/"+iceUnixNum+"\n")
					os.environ['SESSION_MANAGER'] = "local/"+hostName+":@/tmp/.ICE-unix/"+iceUnixNum+",unix/"+hostName+":/tmp/.ICE-unix/"+iceUnixNum
					break
			for key in os.environ.keys():
				logstr(conf, "os.environ["+key+"]="+os.environ[key]+"\n")
		except Exception,e:
			logstr(conf,"xsession does not exist. Error code: %s\n" % e)
	else:
		try:
			# This is needed on SLE 12 for popup windows to work
			envVars = file('/opt/suse/testKits/system/configs/xsession', 'r' )
			for env in envVars.readlines():
				if env == "\n":
					continue
				line = env.split()
				if re.search("=", env ) != None:
					keys = line[2].split('=')
					key = keys[0]
					logstr(conf, "key = "+key+"\n")
				else:
					key = line[2]
					logstr(conf, "key = "+key+"\n")
				if re.search("\"", env) != None:
					value = env.split('"')
					logstr(conf, "Setting os.environ["+key+"] = "+value[1]+"\n")
					os.environ[key] = value[1]
					if key == "HOSTNAME":
						hostName = value[1]
						logstr(conf, "hostName = "+hostName+"\n")
					if key == "XAUTHLOCALHOSTNAME":
						hostName = value[1]
						logstr(conf, "hostName = "+hostName+"\n")
			logstr(conf, "Setting os.environ['DISPLAY'] = \":0\"\n")
			os.environ['DISPLAY'] = ":0"
			# set environmental varibles that need to be updated
			for line in os.listdir( '/run/gdm/' ):
				logstr(conf, line+" = os.listdir( '/run/gdm/' )\n" )
				if re.search( "auth-for-root", line ) != None:
					newXAuth = line
					logstr(conf, "newXAuth = "+newXAuth+"\n")
					logstr(conf, "Setting os.environ['XAUTHORITY'] =  \"/run/gdm/"+newXAuth+"/database\"\n")
					os.environ['XAUTHORITY'] = "/run/gdm/"+newXAuth+"/database"
					break
			for line in os.listdir( '/run/user/0/' ):
				logstr(conf, line+" = os.listdir( '/run/user/0/' )\n" )
				if re.search( "keyring", line ) != None:
					newGnomeKeyringCtrl = line
					logstr(conf, "newGnomeKeyringCtrl="+newGnomeKeyringCtrl+'\n')
					logstr(conf, "Setting os.environ['GPG_AGENT_INFO'] =  \"/run/user/0/"+newGnomeKeyringCtrl+"/gpg:0:1\"\n")
					os.environ['GPG_AGENT_INFO'] = "/run/user/0/"+newGnomeKeyringCtrl+"/gpg:0:1"
					logstr(conf, "Setting os.environ['SSH_AUTH_SOCK'] = \"/run/user/0/"+newGnomeKeyringCtrl+"/ssh\"\n")
					os.environ['SSH_AUTH_SOCK'] = "/run/user/0/"+newGnomeKeyringCtrl+"/ssh"
					break
			for line in os.listdir( '/tmp/.ICE-unix/' ):
				logstr(conf, line+" = os.listdir( '/tmp/.ICE-unix/' )\n" )
				iceUnixNum = line
				logstr(conf, "iceUnixNum="+iceUnixNum+'\n')
				logstr(conf, "Setting os.environ['SESSION_MANAGER'] =  \"local/"+hostName+":@/tmp/.ICE-unix/"+iceUnixNum+",unix/"+hostName+":/tmp/.ICE-unix/"+iceUnixNum+"/database\"\n")
				os.environ['SESSION_MANAGER'] = "local/"+hostName+":@/tmp/.ICE-unix/"+iceUnixNum+",unix/"+hostName+":/tmp/.ICE-unix/"+iceUnixNum+"/database"
				break
			for key in os.environ.keys():
				logstr(conf, "os.environ["+key+"]="+os.environ[key]+"\n")
		except Exception,e:
			if re.search( "11", conf.osVer ) == None:
				logstr(conf,"xsession does not exist. Error code: %s\n" % e)
	logstr(conf,cmdline+'\n')
	os.system(cmdline)

def cleanupEnv(conf):
	logstr(conf,'\n'+'='*40)
	# Just in case the test gets an error or interrupt and quits prior to the timeout
	if conf.LoopMode and conf.LoopModeType == LOOP_TIMEOUT:
		signal.alarm(0)		# clear the alarm.

def logstart(conf):
	logstr(conf,'>'*20)

def getOsVer( conf ):
	try:
		os.stat( "/etc/SuSE-release" )
		with open( "/etc/SuSE-release" ) as f:
			for line in f:
				if re.search("VERSION =", line) != None:
					ver = string.split( line, " " )
					conf.osVer = ver[2]
				if re.search("PATCHLEVEL =", line) != None:
					sp = string.split( line )
					conf.osVer = ver[2] + "." + sp[2]
	except OSError:
		with open( "/etc/os-release" ) as f:
			for line in f:
				if re.search("VERSION=", line) != None:
					ver = string.split( line, '"' )
					conf.osVer = ver[1]
	finally:
		f.close()		


def logend(conf,status):
	global alarmTimeOut
	f = file(conf.LogFile,'a')
	f.write('\n' + '<'*20+'\n')
	f.write("\nExitstatus: %d " % status)
	# write out what the Exitstatus number means
	if os.WIFEXITED(status):
		f.write("(WIFEXITED, WEXITSTATUS = %d)" % os.WEXITSTATUS(status))
	if os.WIFSIGNALED(status):
		f.write("(WIFSIGNALED, WTERMSIG = %d)" % os.WTERMSIG(status))
	if os.WIFSTOPPED(status):	
		f.write("(WIFSTOPPED, WSTOPSIG = %d)" % os.WSTOPSIG(status))
	# write out the exit message
	if conf.LoopMode and alarmTimeOut:
		f.write('\nINFO: timeout reached: terminated last child')
	elif os.WIFEXITED(status):
		f.write("=> exit code %d" % os.WEXITSTATUS(status))
	elif os.WIFSIGNALED(status):
		f.write("=> child got signal %d" % os.WTERMSIG(status))
	else:
		f.write("=> child got stop signal %d" % os.WSTOPSIG(status))
	f.write("\n")
	f.close()

def logstr(conf, str1 ):
	msg = '\n' + time.asctime() + " " + str1 
	if conf.LogFile != "":
		f = file(conf.LogFile,'a')
		f.write( msg )
		f.close()
	else:
		print( msg )

def alarmHandler(signum,frame):
	global WaitForPID,alarmTimeOut
	if WaitForPID != -1:
		os.kill(WaitForPID, signal.SIGTERM)
		logstr(conf, "Info: child %s terminated (maximum runtime exceeded)" % WaitForPID)
		alarmTimeOut = True

def sigHandler(signum,frame):
	global WaitForPID
	if signum == signal.SIGQUIT:
		logstr(conf, "Warning: SIGQUIT (Quit from keyboard) recieved, ignored")
	elif signum == signal.SIGTERM:
		if WaitForPID != -1:
			os.kill(WaitForPID, signal.SIGTERM)
			logstr(conf, "wainting for %d " % WaitForPID)
			os.waitpid(WaitForPID,0)
			logstr(conf, "%d finished " % WaitForPID)
			cleanupEnv(conf)
			sys.exit(1)
	elif signum == signal.SIGUSR1:
		# TODO: Add some fancy stuff
		pass

def spawnChild(conf):
	global WaitForPID
	f = file(conf.LogFile,'a')
#	logstr(conf, time.ctime())
	pid = os.fork()
	if pid == 0: # child
		WaitForPID = pid
		# clear signal handlers
		try:
			signal.signal(signal.SIGALRM, signal.SIG_IGN)
			os.setsid()
			os.dup2(f.fileno(),sys.stdout.fileno())
			os.dup2(f.fileno(),sys.stderr.fileno())
			cmdline = conf.Command.split()
			line = os.popen( "/sbin/runlevel" ).readline()
			level = line.split()
			if level[1] != "5":
				# print "Not at runlevel 5"
				if re.search("xterm", conf.Command) != None:
#				if re.search("gnome-terminal", conf.Command) != None:
					# remove gnome-terminal from command line.
					cmdline = cmdline[6:]
			if len(cmdline) > 1:
				cmdargs = cmdline[1:]
			else:
				cmdargs = []
			if cmdline[0][0] != '/': # relative path
				cmdline[0] = './'+cmdline[0]
			executed=[]
			executed.append("Executed ")
			logstr(conf,"Executed: "+cmdline[0]+ " " + " ".join(cmdargs))			
			os.execvp(cmdline[0], [ cmdline[0], ]+cmdargs)			
		except Exception,e:
			logstr(conf,"Error %s during test setup:" % e)
			cleanupEnv(conf)
			sys.exit(1)
	else: # parent
		WaitForPID = pid
		if conf.ReniceVal != 0:
			str = "renice %d %u" % (conf.ReniceVal,pid)
			logstr(conf, "os.system("+str+")")
			os.system(str)
		signal.signal(signal.SIGQUIT,sigHandler)
		again = 1
		while again:
			try:
				cpid,status = os.waitpid(WaitForPID,0)
				again = 0
			except OSError: # Interrupted system call
				pass		# Nothing to be done in this case.
			except KeyboardInterrupt:
				os.kill(WaitForPID,signal.SIGTERM)
				cpid,status = os.waitpid(WaitForPID,0)
				return status
		WaitForPID = -1
		if cpid == -1:
			logstr(conf, "\n***\n")
			logstr(conf,"Error: an error occured during waitpid")
			logstr(conf, "\n***\n")
			cleanupEnv(conf)
			sys.exit(1)
		# When we execute gnome-terminal and gnome-terminal executes a test, no matter
		# what the test returns, gnome-terminal always returns 0, unless gnome-terminal
		# fails to execute. If gnome-terminal fails to execute, it returns a 1.
		# So we have to return the status of the test in a file and
		# pass on the result on to be evaluated.
		if status == 0:	
			try:
				# open status file (if it exists and get return code)
				statusFilePath = conf.LogDir + '/' + conf.PrefixLogFile + '_status'
				statusFile = file( statusFilePath,'r')
				rc = statusFile.read()
				status = int(rc)
				statusFile.close()
				os.remove(conf.LogDir + '/' + conf.PrefixLogFile + '_status')
				logstr(conf, "xterm test exit status=%d\n" % status)
#				logstr(conf, "gnome-terminal test exit status=%d\n" % status)
			except IOError:		# file doesn't exist
				if re.search("xterm", conf.Command) != None:
#				if re.search("gnome-terminal", conf.Command) != None:
					status = 1
					logstr(conf, "\n***\n")
					logstr(conf, "No xterm test exit status file found:")
#					logstr(conf, "No gnome-terminal test exit status file found:")
					logstr(conf, statusFilePath )
					logstr(conf, "\n***\n")
		return status
	
def runTest(conf):
	global alarmTimeOut
	loopStatus = 1
	signal.signal(signal.SIGALRM,alarmHandler)
	signal.signal(signal.SIGTERM,sigHandler)
	if conf.LoopMode and conf.LoopModeType == LOOP_TIMEOUT:
		signal.alarm(conf.TimeToRun)
	while 1:
		logstart(conf)
		if not alarmTimeOut:
			curtime = time.localtime()
			logstr(conf, conf.Command + " Test started at: %d-%02d-%02d %02d:%02d:%02d" % curtime[0:6] )
			status = spawnChild(conf)
			curtime = time.localtime()
			logstr(conf, conf.Command + " Test stopped at: %d-%02d-%02d %02d:%02d:%02d" % curtime[0:6] )
		else:
			break
		if status == 0:
			loopStatus = 0
		logend(conf,status)
		conf.loopcount += 1
		if conf.LoopMode and os.WIFEXITED(status):
			if os.WEXITSTATUS(status) == 0:
				if conf.LoopModeType == LOOP_TIMES:
					if conf.loopcount < conf.NumberOfLoops:
						continue
					else:
						break
				continue
		break
	# if we have told the test to run for a certain amount of time:
	if conf.LoopMode and alarmTimeOut:
		if loopStatus == 0:
			logstr(conf,"\nINFO: runTest: loopStatus == 0")
			return 0
		elif loopStatus == 1: 
			if   os.WEXITSTATUS(status) == 1:
				logstr(conf,"\nINFO: runTest: loopStatus == 1, WEXITSTATUS=1\n")
				return 1
			elif os.WEXITSTATUS(status) == 2:
				logstr(conf,"\nINFO: runTest: loopStatus == 1, WEXITSTATUS=2\n")
				return 2
			elif os.WEXITSTATUS(status) == 3:
				logstr(conf,"\nINFO: runTest: loopStatus == 1, WEXITSTATUS=3\n")
				return 3
			elif os.WEXITSTATUS(status) == 4:
				logstr(conf,"\nINFO: runTest: loopStatus == 1, WEXITSTATUS=4\n")
				return 4
			elif os.WEXITSTATUS(status) == 5:
				logstr(conf,"\nINFO: runTest: loopStatus == 1, WEXITSTATUS=5\n")
				return 5
			else:
				logstr(conf,"\nINFO: runTest: loopStatus == 1, WEXITSTATUS=%d\n" % os.WEXITSTATUS(status))
				return 1
	# if we have told the test to run a certain number of times:
	if conf.LoopMode and conf.LoopModeType == LOOP_TIMES:
		if conf.loopcount < conf.NumberOfLoops:
			logstr(conf,"\nINFO: runTest: ran %d times," % conf.loopcount)
			logstr(conf," but should have run %d times.\n" % conf.NumberOfLoops)
			return 1
	# everything else
	if os.WIFEXITED(status):
		if os.WEXITSTATUS(status) == 0:
			logstr(conf,"\nINFO: runTest: WIFEXITED, WEXITSTATUS=0\n")
			return 0
		elif os.WEXITSTATUS(status) == 2:
			logstr(conf,"\nINFO: runTest: WIFEXITED, WEXITSTATUS=2\n")
			return 2
		elif os.WEXITSTATUS(status) == 3:
			logstr(conf,"\nINFO: runTest: WIFEXITED, WEXITSTATUS=3\n")
			return 3
		elif os.WEXITSTATUS(status) == 4:
			logstr(conf,"\nINFO: runTest: WIFEXITED, WEXITSTATUS=4\n")
			return 4
		elif os.WEXITSTATUS(status) == 5:
			logstr(conf,"\nINFO: runTest: WIFEXITED, WEXITSTATUS=5\n")
			return 5
		else:
			logstr(conf,"\nINFO: runTest: WIFEXITED, WEXITSTATUS=%d\n" % os.WEXITSTATUS(status))
			return 1
	if re.search("xterm", conf.Command) != None:
#	if re.search("gnome-terminal", conf.Command) != None:
		if os.WIFSIGNALED(status):
			if os.WTERMSIG(status) == 0:
				logstr(conf,"\nINFO: runTest: WIFSIGNALED, WTERMSIG=0\n")
				return 0
			if os.WTERMSIG(status) == 1:
				logstr(conf,"\nINFO: runTest: WIFSIGNALED, WTERMSIG=1\n")
				return 1
			if os.WTERMSIG(status) == 2:
				logstr(conf,"\nINFO: runTest: WIFSIGNALED, WTERMSIG=2\n")
				return 2
			if os.WTERMSIG(status) == 3:
				logstr(conf,"\nINFO: runTest: WIFSIGNALED, WTERMSIG=3\n")
				return 3
			if os.WTERMSIG(status) == 4:
				logstr(conf,"\nINFO: runTest: WIFSIGNALED, WTERMSIG=4\n")
				return 4
			if os.WTERMSIG(status) == 5:
				logstr(conf,"\nINFO: runTest: WIFSIGNALED, WTERMSIG=5\n")
				return 5
	logstr(conf,"\nINFO: runTest: Default return 1\n")
	return 1

if __name__ == '__main__':
	conf = checkParams()
	#checkUID()
#	checkTestApply(conf)
	prepareEnv(conf)
	if conf.LoopMode:
		if conf.LoopModeType == LOOP_TIMEOUT:
			logstr(conf,"Running for %s seconds...\n" % conf.TimeToRun)
		else:
			logstr(conf,"Running child %s times...\n" % conf.NumberOfLoops)
	ret = runTest(conf)
	cleanupEnv(conf)
	sys.exit(ret)
