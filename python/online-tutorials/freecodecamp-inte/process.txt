Makes possible to run code in parallel.
Process: An instance of a program (e.g a python interpreter)
Thread: Is an entity within a process.  A process can have multiple threads.

+ Takes advantage of multiple CPUs and cores
+ Separate memory space -> Memory is not shared between processes
+ Great for CPU-bound processing
+ New process is started independently from other processes
+ Processes are interruptible/killable
+ One GIL for each process -> avoids GIL (Global Interpreter Lock) limitation

- Heaveyweight
- Starting a process is slower than starting a thread
- More memory
- IPC (inter-process communication) is more complicated.  Memory sharing is not
so easy.

Threads.txt
Threads: An entity within a process that can be scheduled (aka "lightweight
process").  A process can spawn multiple threads.

+ All threads within a process share the same memory
+ lightweight
+ Starting a thread is faster than starting a process
+ Great for I/O-bound tasks

- Threading is limited by GIL: Only one thread at a time
- No effect for CPU-bound tasks
- Not interruptible/killable (careful with memory leaks)
- Careful with race conditions (two or more thread want to modify same var same
time)


GIL: Global Interpreter Lock in python
- A lock that allows only one thread at a time to execute in python

- Needed in CPython because memory management is not thread-safe

- Ways to Avoid the GIL:
    - Use multiprocessing
    - Use a different, free-threaded Python implementation (Jython, IronPython)
    - Use python as a wrapper for third-party libraries (C/C++) -> numpy, scipy